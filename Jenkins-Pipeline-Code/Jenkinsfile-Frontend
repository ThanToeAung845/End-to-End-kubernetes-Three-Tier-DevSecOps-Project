pipeline {
    agent any 
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO1')
        AWS_DEFAULT_REGION = 'ap-southeast-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git url: 'https://github.com/ThanToeAung845/End-to-End-kubernetes-Three-Tier-DevSecOps-Project.git',
                    branch: 'main',
                    credentialsId: 'GITHUB'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                dir('Application-Code/frontend') {
                    withSonarQubeEnv('sonar-server') {
                        sh """
                            ${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectName=three-tier-frontend \
                            -Dsonar.projectKey=three-tier-frontend
                        """
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Application-Code/frontend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                dir('Application-Code/frontend') {
                    sh '''
                        docker system prune -f
                        docker container prune -f
                        docker build -t $AWS_ECR_REPO_NAME .
                    '''
                }
            }
        }
        stage("ECR Image Pushing") {
            steps {
                sh """
                    aws ecr get-login-password --region $AWS_DEFAULT_REGION | \
                    docker login --username AWS --password-stdin $REPOSITORY_URI

                    docker tag $AWS_ECR_REPO_NAME $REPOSITORY_URI/$AWS_ECR_REPO_NAME:${BUILD_NUMBER}
                    docker push $REPOSITORY_URI/$AWS_ECR_REPO_NAME:${BUILD_NUMBER}
                """
            }
        }
        stage("Trivy Image Scan") {
            steps {
                sh 'trivy image $REPOSITORY_URI/$AWS_ECR_REPO_NAME:${BUILD_NUMBER} > trivyimage.txt'
            }
        }
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "End-to-End-kubernetes-Three-Tier-DevSecOps-Project"
                GIT_USER_NAME = "ThanToeAung845"
            }
            steps {
        dir('Kubernetes-Manifests-file/Frontend') {
            withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'GITHUB_TOKEN')]) {
                // Use triple single quotes to avoid Groovy interpolation, so $GITHUB_TOKEN stays hidden from logs
                sh '''
                    git config user.email "toe842005@gmail.com"
                    git config user.name "ThanToeAung845"

                    # Extract old image tag assuming format: frontend:<tag>
                    imageTag=$(grep -o "${AWS_ECR_REPO_NAME}:[^[:space:]]*" deployment.yaml | head -1 | cut -d':' -f2)
                    echo "Old tag: $imageTag"

                    # Replace old tag with new build number tag
                    sed -i "s|${AWS_ECR_REPO_NAME}:$imageTag|${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}|" deployment.yaml

                    git add deployment.yaml
                    git commit -m "Update deployment Image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
                    }
                }
            }
        }
    }
}
